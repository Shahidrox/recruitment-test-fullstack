{"ast":null,"code":"import axios from 'axios';\nvar REQUEST = 'react-devise-sample/articles/REQUEST';\nvar RECEIVED = 'react-devise-sample/articles/RECEIVED';\nvar FAILED = 'react-devise-sample/articles/FAILED';\nexport function fetchArticles() {\n  return function (dispatch, getState) {\n    dispatch(requestArticles());\n    return axios({\n      url: '/api/v1/articles',\n      method: 'GET'\n    }).then(function (response) {\n      console.log('response');\n      console.log(response.data);\n      console.log('response');\n      dispatch(receiveArticles(response.data.articles));\n    })[\"catch\"](function (error) {\n      console.log('error');\n      console.log(error);\n      dispatch(failFetchArticles());\n    });\n  };\n}\n\nfunction requestArticles() {\n  return {\n    type: REQUEST\n  };\n}\n\nfunction receiveArticles(articles) {\n  return {\n    type: RECEIVED,\n    articles: articles\n  };\n}\n\nfunction failFetchArticles() {\n  return {\n    type: FAILED\n  };\n}\n\nexport default function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  switch (action.type) {\n    case REQUEST:\n      return Object.assign({}, state, {\n        loading: true\n      });\n\n    case RECEIVED:\n      return {\n        loading: false,\n        articles: action.articles\n      };\n\n    case FAILED:\n      {\n        return Object.assign({}, state, {\n          loading: false\n        });\n      }\n\n    default:\n      return state;\n  }\n}\nvar initialState = {\n  loading: false,\n  articles: []\n};","map":{"version":3,"sources":["/Users/shahid/Desktop/recruitment-test-fullstack/app/javascript/components/modules/ArticleList.js"],"names":["axios","REQUEST","RECEIVED","FAILED","fetchArticles","dispatch","getState","requestArticles","url","method","then","response","console","log","data","receiveArticles","articles","error","failFetchArticles","type","reducer","state","initialState","action","Object","assign","loading"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,OAAO,GAAG,sCAAhB;AACA,IAAMC,QAAQ,GAAG,uCAAjB;AACA,IAAMC,MAAM,GAAG,qCAAf;AAEA,OAAO,SAASC,aAAT,GAAyB;AAC9B,SAAO,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC7BD,IAAAA,QAAQ,CAACE,eAAe,EAAhB,CAAR;AACA,WAAOP,KAAK,CAAC;AACXQ,MAAAA,GAAG,EAAE,kBADM;AAEXC,MAAAA,MAAM,EAAE;AAFG,KAAD,CAAL,CAGJC,IAHI,CAGC,UAAAC,QAAQ,EAAI;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAR,MAAAA,QAAQ,CAACU,eAAe,CAACJ,QAAQ,CAACG,IAAT,CAAcE,QAAf,CAAhB,CAAR;AACD,KARM,WAQE,UAAAC,KAAK,EAAI;AAChBL,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACAZ,MAAAA,QAAQ,CAACa,iBAAiB,EAAlB,CAAR;AACD,KAZM,CAAP;AAaD,GAfD;AAgBD;;AAED,SAASX,eAAT,GAA2B;AACzB,SAAO;AAAEY,IAAAA,IAAI,EAAElB;AAAR,GAAP;AACD;;AAED,SAASc,eAAT,CAAyBC,QAAzB,EAAmC;AACjC,SAAO;AAAEG,IAAAA,IAAI,EAAEjB,QAAR;AAAkBc,IAAAA,QAAQ,EAARA;AAAlB,GAAP;AACD;;AAED,SAASE,iBAAT,GAA6B;AAC3B,SAAO;AAAEC,IAAAA,IAAI,EAAEhB;AAAR,GAAP;AACD;;AAED,eAAe,SAASiB,OAAT,GAAoD;AAAA,MAAnCC,KAAmC,uEAA3BC,YAA2B;AAAA,MAAbC,MAAa,uEAAJ,EAAI;;AACjE,UAAQA,MAAM,CAACJ,IAAf;AACE,SAAKlB,OAAL;AACE,aAAOuB,MAAM,CAACC,MAAP,CACL,EADK,EAELJ,KAFK,EAGL;AACEK,QAAAA,OAAO,EAAE;AADX,OAHK,CAAP;;AAOF,SAAKxB,QAAL;AACE,aAAO;AACLwB,QAAAA,OAAO,EAAE,KADJ;AAELV,QAAAA,QAAQ,EAAEO,MAAM,CAACP;AAFZ,OAAP;;AAIF,SAAKb,MAAL;AAAY;AACV,eAAOqB,MAAM,CAACC,MAAP,CACL,EADK,EAELJ,KAFK,EAGL;AACEK,UAAAA,OAAO,EAAE;AADX,SAHK,CAAP;AAOD;;AACD;AAAS,aAAOL,KAAP;AAvBX;AAyBD;AAED,IAAMC,YAAY,GAAG;AACnBI,EAAAA,OAAO,EAAE,KADU;AAEnBV,EAAAA,QAAQ,EAAE;AAFS,CAArB","sourcesContent":["import axios from 'axios'\n\nconst REQUEST = 'react-devise-sample/articles/REQUEST'\nconst RECEIVED = 'react-devise-sample/articles/RECEIVED'\nconst FAILED = 'react-devise-sample/articles/FAILED'\n\nexport function fetchArticles() {\n  return (dispatch, getState) => {\n    dispatch(requestArticles())\n    return axios({\n      url: '/api/v1/articles',\n      method: 'GET'\n    }).then(response => {\n      console.log('response')\n      console.log(response.data)\n      console.log('response')\n      dispatch(receiveArticles(response.data.articles))\n    }).catch(error => {\n      console.log('error')\n      console.log(error)\n      dispatch(failFetchArticles())\n    })\n  }\n}\n\nfunction requestArticles() {\n  return { type: REQUEST }\n}\n\nfunction receiveArticles(articles) {\n  return { type: RECEIVED, articles }\n}\n\nfunction failFetchArticles() {\n  return { type: FAILED }\n}\n\nexport default function reducer(state = initialState, action = {}) {\n  switch (action.type) {\n    case REQUEST:\n      return Object.assign(\n        {},\n        state,\n        {\n          loading: true\n        }\n      )\n    case RECEIVED:\n      return {\n        loading: false,\n        articles: action.articles\n      }\n    case FAILED:{\n      return Object.assign(\n        {},\n        state,\n        {\n          loading: false\n        }\n      )\n    }\n    default: return state\n  }\n}\n\nconst initialState = {\n  loading: false,\n  articles: []\n}"]},"metadata":{},"sourceType":"module"}
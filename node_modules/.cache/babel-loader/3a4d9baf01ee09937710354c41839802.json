{"ast":null,"code":"import axios from 'axios';\nvar REQUEST = 'react-devise-sample/auth/REQUEST';\nvar RECEIVED = 'react-devise-sample/auth/RECEIVED';\nvar FAILED = 'react-devise-sample/auth/FAILED';\nvar SIGNOUT = 'react-devise-sample/auth/SIGNOUT';\nexport function fetchArticles() {\n  return function (dispatch, getState) {\n    dispatch(requestArticles());\n    return axios({\n      url: '/api/v1/articles/list',\n      method: 'POST'\n    }).then(function (response) {\n      dispatch(receiveArticles(response.data));\n    })[\"catch\"](function (error) {\n      dispatch(failFetchArticles());\n    });\n  };\n}\n\nfunction requestArticles() {\n  return {\n    type: REQUEST\n  };\n}\n\nfunction receiveArticles(data) {\n  return {\n    type: RECEIVED,\n    data: data\n  };\n}\n\nfunction failFetchArticles() {\n  return {\n    type: FAILED\n  };\n} // Reducer\n\n\nexport default function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  switch (action.type) {\n    case REQUEST:\n      return Object.assign({}, state, {\n        loading: true\n      });\n\n    case RECEIVED:\n      return {\n        loading: false,\n        articles: action.date.articles,\n        pagination: action.date.pagination\n      };\n\n    case FAILED:\n      {\n        return Object.assign({}, state, {\n          loading: false\n        });\n      }\n\n    default:\n      return state;\n  }\n}\nvar initialState = {\n  loading: false,\n  isAuthenticated: false,\n  client: null,\n  accessToken: null,\n  uid: null,\n  expiry: null\n};","map":{"version":3,"sources":["/Users/shahid/Desktop/recruitment-test-fullstack/app/javascript/components/modules/ArticleList.js"],"names":["axios","REQUEST","RECEIVED","FAILED","SIGNOUT","fetchArticles","dispatch","getState","requestArticles","url","method","then","response","receiveArticles","data","error","failFetchArticles","type","reducer","state","initialState","action","Object","assign","loading","articles","date","pagination","isAuthenticated","client","accessToken","uid","expiry"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,OAAO,GAAG,kCAAhB;AACA,IAAMC,QAAQ,GAAG,mCAAjB;AACA,IAAMC,MAAM,GAAG,iCAAf;AACA,IAAMC,OAAO,GAAG,kCAAhB;AAEA,OAAO,SAASC,aAAT,GAAyB;AAC9B,SAAO,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC7BD,IAAAA,QAAQ,CAACE,eAAe,EAAhB,CAAR;AACA,WAAOR,KAAK,CAAC;AACXS,MAAAA,GAAG,EAAE,uBADM;AAEXC,MAAAA,MAAM,EAAE;AAFG,KAAD,CAAL,CAGJC,IAHI,CAGC,UAAAC,QAAQ,EAAI;AAClBN,MAAAA,QAAQ,CAACO,eAAe,CAACD,QAAQ,CAACE,IAAV,CAAhB,CAAR;AACD,KALM,WAKE,UAAAC,KAAK,EAAI;AAChBT,MAAAA,QAAQ,CAACU,iBAAiB,EAAlB,CAAR;AACD,KAPM,CAAP;AAQD,GAVD;AAWD;;AAED,SAASR,eAAT,GAA2B;AACzB,SAAO;AAAES,IAAAA,IAAI,EAAEhB;AAAR,GAAP;AACD;;AAED,SAASY,eAAT,CAAyBC,IAAzB,EAA+B;AAC7B,SAAO;AAAEG,IAAAA,IAAI,EAAEf,QAAR;AAAkBY,IAAAA,IAAI,EAAJA;AAAlB,GAAP;AACD;;AAED,SAASE,iBAAT,GAA6B;AAC3B,SAAO;AAAEC,IAAAA,IAAI,EAAEd;AAAR,GAAP;AACD,C,CAED;;;AACA,eAAe,SAASe,OAAT,GAAoD;AAAA,MAAnCC,KAAmC,uEAA3BC,YAA2B;AAAA,MAAbC,MAAa,uEAAJ,EAAI;;AACjE,UAAQA,MAAM,CAACJ,IAAf;AACE,SAAKhB,OAAL;AACE,aAAOqB,MAAM,CAACC,MAAP,CACL,EADK,EAELJ,KAFK,EAGL;AACEK,QAAAA,OAAO,EAAE;AADX,OAHK,CAAP;;AAOF,SAAKtB,QAAL;AACE,aAAO;AACLsB,QAAAA,OAAO,EAAE,KADJ;AAELC,QAAAA,QAAQ,EAAEJ,MAAM,CAACK,IAAP,CAAYD,QAFjB;AAGLE,QAAAA,UAAU,EAAEN,MAAM,CAACK,IAAP,CAAYC;AAHnB,OAAP;;AAKF,SAAKxB,MAAL;AAAY;AACV,eAAOmB,MAAM,CAACC,MAAP,CACL,EADK,EAELJ,KAFK,EAGL;AACEK,UAAAA,OAAO,EAAE;AADX,SAHK,CAAP;AAOD;;AACD;AAAS,aAAOL,KAAP;AAxBX;AA0BD;AAED,IAAMC,YAAY,GAAG;AACnBI,EAAAA,OAAO,EAAE,KADU;AAEnBI,EAAAA,eAAe,EAAE,KAFE;AAGnBC,EAAAA,MAAM,EAAE,IAHW;AAInBC,EAAAA,WAAW,EAAE,IAJM;AAKnBC,EAAAA,GAAG,EAAE,IALc;AAMnBC,EAAAA,MAAM,EAAE;AANW,CAArB","sourcesContent":["import axios from 'axios'\n\nconst REQUEST = 'react-devise-sample/auth/REQUEST'\nconst RECEIVED = 'react-devise-sample/auth/RECEIVED'\nconst FAILED = 'react-devise-sample/auth/FAILED'\nconst SIGNOUT = 'react-devise-sample/auth/SIGNOUT'\n\nexport function fetchArticles() {\n  return (dispatch, getState) => {\n    dispatch(requestArticles())\n    return axios({\n      url: '/api/v1/articles/list',\n      method: 'POST'\n    }).then(response => {\n      dispatch(receiveArticles(response.data))\n    }).catch(error => {\n      dispatch(failFetchArticles())\n    })\n  }\n}\n\nfunction requestArticles() {\n  return { type: REQUEST }\n}\n\nfunction receiveArticles(data) {\n  return { type: RECEIVED, data }\n}\n\nfunction failFetchArticles() {\n  return { type: FAILED }\n}\n\n// Reducer\nexport default function reducer(state = initialState, action = {}) {\n  switch (action.type) {\n    case REQUEST:\n      return Object.assign(\n        {},\n        state,\n        {\n          loading: true\n        }\n      )\n    case RECEIVED:\n      return {\n        loading: false,\n        articles: action.date.articles,\n        pagination: action.date.pagination\n      }\n    case FAILED:{\n      return Object.assign(\n        {},\n        state,\n        {\n          loading: false\n        }\n      )\n    }\n    default: return state\n  }\n}\n\nconst initialState = {\n  loading: false,\n  isAuthenticated: false,\n  client: null,\n  accessToken: null,\n  uid: null,\n  expiry: null\n}"]},"metadata":{},"sourceType":"module"}